#!/usr/bin/env python
"""
 syncSftp.py

 Sync the modified files by sftp protocol.

"""

import paramiko
import os, sys
import time

##### get current time & store it####
def getCurTime():
    f = open('currentTime', 'w')
    f.write(str(time.time()))
    f.close()



class syncSftp:
########## Variables #########
    ### remote files list
    _files = []

    #### the modified files list in the remote
    _Mfs = []

    #### remote dirs list
    _dirs = []

######the local dirs to be created according to remote dirs ####
    localSubDir = []

#######################################################
    def __init__(self, hostname, username, password, port, desDir, localDir):
        self.hostname = hostname
        self.username = username
        self.password = password
        self.port = port
        self.desDir = os.path.normpath(desDir)
        self.localDir = os.path.normpath(localDir)
        self.createIniDir()


###### Convert path to list #####
    def path2list(self, path):
        path = os.path.normpath(path)
        plist = path.split('/')[1:]
        #print 'path2list:path:%s plist:%s' % (path, plist)
        return plist


##### Convert list to path ######
    def list2path(self, list):
        n = 0
        path = ''
        while n < len(list):
            path = path + '/' + list[n]
            n = n + 1
        return path


###### Create the dir that isn't exist. #######
    def createNotExistDir(self, dir):
        if not os.path.exists(dir):
            os.makedirs(dir)


###### Create the initial directory in the local ###
    def createIniDir(self):
        dirBase = os.path.basename(self.desDir) 
        iniDir = os.path.join(self.localDir, dirBase)
        #print dirBase, iniDir
        self.createNotExistDir(iniDir)

###### get the local dirs to be created according to remote dirs ####
    def getLocalDirInfo(self):
        dirBase = os.path.basename(self.desDir)
        for dir in self._dirs:
            path = dir[2]
            plist = self.path2list(path)
            #print "path:%s plist:%s" % (path, plist)
            dirBaseLoc = plist.index(dirBase)
            nPathList = plist[dirBaseLoc:]
            nPath = self.list2path(nPathList)
            #print "nPath:%s" % (nPath)
            fPath = self.localDir + nPath
            #print "localSubDir:%s self.localDir:%s" % (self.localSubDir, self.localDir)
            self.localSubDir.append(fPath)
            

###### Converting the remote path to the local path based on the remote dir & the local dir ####
    def rPath2lPath(self, rDir, lDir, rPath):
        ### Standard these paths #####
        rDir = os.path.normpath(rDir)
        lDir = os.path.normpath(lDir)
        rPath = os.path.normpath(rPath)
        ###########
        dirBase = os.path.basename(rDir)
        rPathList = self.path2list(rPath)
            #print "path:%s rPathList:%s" % (path, rPathList)
        baseNameLoc = rPathList.index(dirBase)
        nRPathList = rPathList[baseNameLoc:]
        nRPath = self.list2path(nRPathList)
            #print "nRPath:%s" % (nRPath)
        nPath = lDir + nRPath
            #print "localSubDir:%s self.localDir:%s" % (self.localSubDir, self.localDir)
            #self.localSubDir.append(fPath)
        return nPath



###### create the local dirs according to remote dirs ####
    def createLocalDir(self):
        for dir in self.localSubDir:
            self.createNotExistDir(dir)
            

##### connect to remote host by ssh ###
    def sshConn(self):
        paramiko.util.log_to_file('paramiko.log')
        t = paramiko.Transport((self.hostname, self.port))
        self.t = t
        try:
            t.connect(username=self.username, password=self.password)
        except Exception, err:
            print " Failure: Connect remote host: %s" % err
            print "Quiting, please wait for a moment..."
            sys.exit(1)
        print '\tSuccessful: ssh connection'
        self.sftp = paramiko.SFTPClient.from_transport(t)


##### get remote files list from the remote dir #####
    def getFileInfo(self, dir):
        dir = os.path.normpath(dir)
        fs = self.sftp.listdir(dir)
        for f in fs:
            fPath = os.path.join(dir, f)
            fstat = self.sftp.stat(fPath)
            fType = str(fstat)[0]
            fMtime = fstat.st_mtime
            #print fMtime
            if fType == "d":
                self._files.append(('d', fMtime, fPath))
                self.getFileInfo(fPath)
            else:
                #self._files.append(fPath)
                self._files.append(('f', fMtime, fPath))
        #print self._files


###### get dirs list from the remote dir #####
    def getDirInfo(self):
        for f in self._files:
            if f[0] == "d":
                self._dirs.append(f)


###### get the last modified time #######
    def getLastCheckTime(self):
        f = open('currentTime', 'r')
        lastCheckTime = f.read()
        f.close()
        self.lastCheckTime = lastCheckTime


###### get the modified files list from last check #####
    def getMfsInfo(self):
        for f in self._files:
            #print f[1], self.lastCheckTime
            if f[0] != 'd' and f[1] > float(self.lastCheckTime):
                #print f[1], self.lastCheckTime, f[2]
                self._Mfs.append(f)


########## get the modified files from remote dir #####
    def get_Mfs(self):
        #self.sftp.get('/opt/Twisted/clientFactory.py', os.path.join('/tmp', 'clientFactory.py'))
        for f in self._Mfs:
            try:
                print 'Hello %s' % f
                #self.sftp.get(f, os.path.join(self.localDir, f))
                self.sftp.get(f, os.path.join(self.localDir, f))
            except IOError, e:
                print "\tFailure: retrieve %s: %s" % (f, e)


#####  close ssh connection ###
    def sshClose(self):
        self.t.close()



if __name__ == "__main__":
    #self-test code
    #getCurTime()
    x = syncSftp('172.16.200.153', 'tcc', 'tcc', 22, '/opt/OOP', '/tmp')
    x.sshConn()
    x.getFileInfo('/opt/OOP')
    #print x._files
    x.getDirInfo()
    print x._dirs
    print "The number of files:%s" % len(x._files)
    x.getLocalDirInfo()
    print "The local dirs to be created:\t%s" % x.localSubDir
    x.createLocalDir()
    x.getLastCheckTime()
    print "Last Modified time:%s" % x.lastCheckTime
    x.getMfsInfo()
    lPath = x.rPath2lPath('/opt/OOP', '/tmp', '/opt/OOP/gps1')
    print lPath
    #print x._Mfs
    #x.get_Mfs()
    #getCurTime()
    x.sshClose()
